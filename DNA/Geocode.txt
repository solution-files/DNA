using System;
using System.Data;
using Microsoft.Data.SqlClient;
using System.Net.Http;
using System.Text.Json;
using System.Threading.Tasks;
using System.Web; // Required for HttpUtility.UrlEncode

// ****** WARNING ******
// This code was generated by the Gemini AI and has not been tested. It serves as example / psudocode only
// and is not intended for production use.

namespace Utilities.Google {

    public class Geocode {

        // !!! WARNING: DO NOT HARDCODE API KEY IN PRODUCTION !!!
        // Use configuration (appsettings.json, environment variables) instead.
        private const string GoogleApiKey = "YOUR_GOOGLE_GEOCODING_API_KEY"; // <-- Replace with your actual API Key
        private const string GoogleGeocodeApiUrl = "https://maps.googleapis.com/maps/api/geocode/json?";

        // !!! WARNING: DO NOT HARDCODE CONNECTION STRING IN PRODUCTION !!!
        // Use configuration (appsettings.json) instead.
        private const string DatabaseConnectionString = "YOUR_DATABASE_CONNECTION_STRING"; // <-- Replace with your database connection string

        private static readonly HttpClient httpClient = new HttpClient();

        public static async Task Main(string[] args) {
            Console.WriteLine("Starting geocoding process...");

            // List to hold customers to geocode
            var customersToGeocode = new System.Collections.Generic.List<(int CustomerId, string FullAddress)>();

            // 1. Read Customers from Database
            try {
                using (var connection = new SqlConnection(DatabaseConnectionString)) {
                    connection.Open();
                    // Select customers that don't have Latitude/Longitude already,
                    // or select all if you want to re-geocode existing ones.
                    // Adjust query based on your table schema.
                    string selectQuery = @"
                    SELECT CustomerID, Address1, City, State, PostalCode, Country
                    FROM Customers
                    WHERE Latitude IS NULL OR Longitude IS NULL";

                    using (var command = new SqlCommand(selectQuery, connection))
                    using (var reader = command.ExecuteReader()) {
                        while (reader.Read()) {
                            int customerId = reader.GetInt32(reader.GetOrdinal("CustomerID"));
                            string address1 = reader.IsDBNull(reader.GetOrdinal("Address1")) ? "" : reader.GetString(reader.GetOrdinal("Address1")).Trim();
                            string city = reader.IsDBNull(reader.GetOrdinal("City")) ? "" : reader.GetString(reader.GetOrdinal("City")).Trim();
                            string state = reader.IsDBNull(reader.GetOrdinal("State")) ? "" : reader.GetString(reader.GetOrdinal("State")).Trim();
                            string postalCode = reader.IsDBNull(reader.GetOrdinal("PostalCode")) ? "" : reader.GetString(reader.GetOrdinal("PostalCode")).Trim();
                            string country = reader.IsDBNull(reader.GetOrdinal("Country")) ? "" : reader.GetString(reader.GetOrdinal("Country")).Trim();

                            // Concatenate address components for the API query
                            string fullAddress = $"{address1}, {city}, {state} {postalCode}, {country}".Trim();
                            // Clean up extra commas if components are missing
                            fullAddress = fullAddress.Replace(", ,", ",").Replace(",,", ",").Trim(',', ' ');

                            if (!string.IsNullOrWhiteSpace(fullAddress) && fullAddress.Length > 5) // Basic validation
                            {
                                customersToGeocode.Add((customerId, fullAddress));
                            } else {
                                Console.WriteLine($"Skipping CustomerID {customerId}: Address is incomplete or invalid.");
                            }
                        }
                    }
                }
                Console.WriteLine($"Found {customersToGeocode.Count} customers to geocode.");
            } catch (Exception ex) {
                Console.WriteLine($"Error reading customers from database: {ex.Message}");
                return; // Exit if database read fails
            }

            // 2. Geocode Each Address and Update Database
            int geocodedCount = 0;
            int failedCount = 0;

            foreach (var customer in customersToocode) {
                try {
                    var (latitude, longitude) = await GetCoordinatesAsync(customer.FullAddress);

                    if (latitude.HasValue && longitude.HasValue) {
                        // Update the database with the new coordinates
                        await UpdateCustomerCoordinatesAsync(customer.CustomerId, latitude.Value, longitude.Value);
                        Console.WriteLine($"Geocoded CustomerID {customer.CustomerId}: Lat={latitude.Value}, Lng={longitude.Value}");
                        geocodedCount++;
                    } else {
                        Console.WriteLine($"Failed to geocode CustomerID {customer.CustomerId} for address: {customer.FullAddress}");
                        failedCount++;
                        // Optional: Log the failed address for later review
                    }

                    // Implement a small delay to avoid hitting API rate limits
                    // Adjust delay based on your expected volume and Google's limits
                    await Task.Delay(150); // Delay for 150 milliseconds

                } catch (Exception ex) {
                    Console.WriteLine($"An error occurred while processing CustomerID {customer.CustomerId}: {ex.Message}");
                    failedCount++;
                    // Continue processing other customers
                }
            }

            Console.WriteLine("\nGeocoding process finished.");
            Console.WriteLine($"Successfully geocoded: {geocodedCount}");
            Console.WriteLine($"Failed to geocode: {failedCount}");
            Console.WriteLine($"Total processed: {geocodedCount + failedCount}");
        }

        /// <summary>
        /// Calls the Google Geocoding API to get coordinates for an address.
        /// </summary>
        /// <param name="address">The full mailing address string.</param>
        /// <returns>A tuple containing nullable Latitude and Longitude.</returns>
        private static async Task<(double? Latitude, double? Longitude)> GetCoordinatesAsync(string address) {
            if (string.IsNullOrWhiteSpace(address)) {
                return (null, null);
            }

            // Build the API request URL
            // URL-encode the address to handle spaces, commas, etc.
            string encodedAddress = HttpUtility.UrlEncode(address);
            string requestUrl = $"{GoogleGeocodeApiUrl}address={encodedAddress}&key={GoogleApiKey}";

            try {
                HttpResponseMessage response = await httpClient.GetAsync(requestUrl);
                response.EnsureSuccessStatusCode(); // Throw if not a success code

                string responseBody = await response.Content.ReadAsStringAsync();

                // Parse the JSON response
                using (JsonDocument doc = JsonDocument.Parse(responseBody)) {
                    JsonElement root = doc.RootElement;

                    // Check the API status
                    string status = root.GetProperty("status").GetString();

                    if (status == "OK") {
                        // Get the first result (usually the most relevant)
                        JsonElement results = root.GetProperty("results");
                        if (results.GetArrayLength() > 0) {
                            JsonElement firstResult = results[0];
                            JsonElement geometry = firstResult.GetProperty("geometry");
                            JsonElement location = geometry.GetProperty("location");

                            double lat = location.GetProperty("lat").GetDouble();
                            double lng = location.GetProperty("lng").GetDouble();

                            return (lat, lng);
                        }
                    } else if (status == "ZERO_RESULTS") {
                        Console.WriteLine($"Geocoding API returned ZERO_RESULTS for address: {address}");
                    } else {
                        // Handle other statuses like OVER_QUERY_LIMIT, REQUEST_DENIED, etc.
                        Console.WriteLine($"Geocoding API returned status {status} for address: {address}. Message: {root.TryGetProperty("error_message", out var msg) ? msg.GetString() : "N / A"}");
                        // For OVER_QUERY_LIMIT, you might need to implement backoff/retries or increase quota
                    }
                }
            } catch (HttpRequestException e) {
                Console.WriteLine($"HTTP Request Error geocoding address '{address}': {e.Message}");
            } catch (JsonException e) {
                Console.WriteLine($"JSON Parsing Error geocoding address '{address}': {e.Message}");
                Console.WriteLine($"Problematic JSON: {requestUrl}"); // You might want to log the actual response body here
            } catch (Exception e) {
                Console.WriteLine($"An unexpected error occurred geocoding address '{address}': {e.Message}");
            }


            return (null, null); // Return nulls if geocoding failed
        }

        /// <summary>
        /// Updates a customer record in the database with Latitude and Longitude.
        /// </summary>
        /// <param name="customerId">The ID of the customer to update.</param>
        /// <param name="latitude">The Latitude value.</param>
        /// <param name="longitude">The Longitude value.</param>
        /// <returns>A Task representing the asynchronous update operation.</returns>
        private static async Task UpdateCustomerCoordinatesAsync(int customerId, double latitude, double longitude) {
            try {
                using (var connection = new SqlConnection(DatabaseConnectionString)) {
                    await connection.OpenAsync();
                    // Adjust query based on your table schema (column names)
                    string updateQuery = @"
                    UPDATE Customers
                    SET Latitude = @lat, Longitude = @lng
                    WHERE CustomerID = @id";

                    using (var command = new SqlCommand(updateQuery, connection)) {
                        // Use parameterized queries to prevent SQL injection
                        command.Parameters.Add("@lat", SqlDbType.Float).Value = latitude;
                        command.Parameters.Add("@lng", SqlDbType.Float).Value = longitude;
                        command.Parameters.Add("@id", SqlDbType.Int).Value = customerId;

                        int rowsAffected = await command.ExecuteNonQueryAsync();

                        if (rowsAffected == 0) {
                            Console.WriteLine($"Warning: No rows updated for CustomerID {customerId}. Customer might not exist or coordinates were already set.");
                        }
                    }
                }
            } catch (Exception ex) {
                Console.WriteLine($"Error updating database for CustomerID {customerId}: {ex.Message}");
                // Depending on requirements, you might re-queue this customer or log for manual review
            }
        }
    }

}